@use "../mnote-vars.scss" as mn;
@use "../mnote-inputs.scss" as inputs;
@use "~mnote-components/react/dropdowns/dropdowns.scss";

@mixin prompt {
  .prompt-overlay {
    width: 100vw;
    height: 100vh;
    background: map-get(mn.$vars, main-overlay-bg);
    position: fixed;
    top: 0;
    left: 0;
    z-index: 20;
  }

  .prompt {
    z-index: 21;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    background: map-get(mn.$vars, main-bg);
    color: map-get(mn.$vars, main-fg);
    padding: 0.8em;
    margin-top: 2em;
    border-radius: 5px;
    box-sizing: border-box;
    width: min-content;
    min-width: 360px;

    .prompt-buttons {
      width: 100%;
      text-align: right;

      .prompt-button {
        margin-left: 0.5em;

        &.normal {
          @include inputs.button-normal;
        }

        &.emphasis {
          @include inputs.button-emphasis;
        }
      }
    }

    .prompt-text {
      font-family: map-get(mn.$vars, main-font);
      margin-bottom: 1em;
      font-size: 13px;
    }

    .prompt-input {
      @include inputs.text-input;
      margin-bottom: 1em;
    }

    .prompt-dropdown {
      $dropdown-colors: (
        bg: map-get(mn.$vars, main-bg-secondary),
        bg-selected: map-get(mn.$vars, main-fg-dimmer),
        bg-hover: map-get(mn.$vars, main-bg),
        shadow: map-get(mn.$vars, main-shadow),
        fg: map-get(mn.$vars, main-fg),
      );

      @include dropdowns.base;
      @include dropdowns.styled($dropdown-colors);

      .dropdown-container {
        margin-left: 0;
        font-size: 13px;
        width: 100%;
        margin-bottom: 1em;
      }
      .dropdown-toggle,
      .dropdown-menu {
        width: 100%;
      }
    }
  }
}
