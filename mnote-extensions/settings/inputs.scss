@use "~mnote-styles/mnote-vars" as mn;
@use "~mnote-components/react/dropdowns/dropdowns.scss";
@use "~mnote-styles/mnote-inputs.scss" as inputs;
@use "~mnote-components/resets.scss";

@mixin inputs {
  .inputs-boolean {
    @include resets.input;
    width: 2.8em;
    height: 1.4em;
    cursor: pointer;

    svg {
      pointer-events: none;
    }

    &.off {
      .bg {
        fill: map-get(mn.$vars, switch-off-bg);
      }
      .handle {
        fill: map-get(mn.$vars, switch-off-fg);
      }

      &:hover {
        .bg {
          fill: map-get(mn.$vars, switch-off-hover-bg);
        }
        .handle {
          fill: map-get(mn.$vars, switch-off-hover-fg);
        }
      }
    }

    &.on {
      .bg {
        fill: map-get(mn.$vars, switch-on-bg);
      }
      .handle {
        fill: map-get(mn.$vars, switch-on-fg);
      }

      &:hover {
        .bg {
          fill: map-get(mn.$vars, switch-on-hover-bg);
        }
        .handle {
          fill: map-get(mn.$vars, switch-on-hover-fg);
        }
      }
    }
  }

  .inputs-select {
    width: 100%;

    $dropdown-colors: (
      bg: map-get(mn.$vars, main-bg-secondary),
      bg-selected: map-get(mn.$vars, main-fg-dimmer),
      bg-hover: map-get(mn.$vars, main-bg),
      shadow: map-get(mn.$vars, main-shadow),
      fg: map-get(mn.$vars, main-fg),
    );

    @include dropdowns.base;
    @include dropdowns.styled($dropdown-colors);

    .dropdown-container {
      font-size: 0.9em;
      width: 100%;
      margin-left: 0;

      .dropdown-toggle {
        width: 100%;
      }
    }
  }

  .inputs-string,
  .inputs-number {
    .input {
      @include inputs.text-input-small;

      &.invalid {
        border: solid 1px map-get(mn.$vars, main-error);
      }
    }

    .invalid-message {
      color: map-get(mn.$vars, main-error);
      font-size: 0.8em;
      margin-top: 0.2em;
    }
  }
}
